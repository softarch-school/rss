<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title type="text" xml:lang="zh-TW">Software Architecture School</title>
    <subtitle>Automate everything, make life easier!</subtitle>
    <link type="application/atom+xml" href="http://feed.soft-arch.net/feed.xml" rel="self"/>
     <link type="text" href="http://school.soft-arch.net/" rel="alternate"/>
    <updated>2016-08-20T01:30:00+08:00</updated>
    <id>tag:school.soft-arch.net,2016-03-03:/20160303042229671</id>
    <author>
        <name>William Yeh</name>
    </author>
    <rights>Copyright (c) 2015-2016, William Yeh; all rights reserved.</rights>



    <entry>
        <title>系統思考及換位思考，一例 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/241348/on-reading-club"/>
        <updated>2016-08-20T01:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-22:/blog/241348/20160822033133829</id>
        <content type="html">我選擇某主題作為現階段最希望研發團隊強化鞏固的環節。正好公司最近也想對內部技術分享的形式做一些改變，我就把這兩件事合併處理：以該主題作為技術分享的題材，一舉兩得。&lt;br/>這次讀書會的前置作業，要求參加者，每個人都要先針對我設計過的一系列提問，思考每一則問題，並在共享空間上面作答。&lt;br/>這一段故事，是為了具體解釋這陣子我講的一堆狀似嘴砲的話，也是為了替這段自己努力的方向，留下一份紀錄……</content>
    </entry>


    <entry>
        <title>從限制理論看 DevOps / 演講錄影檔公開 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/157917/devops-a-toc-perspective"/>
        <updated>2016-08-17T23:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-22:/blog/157917/20160822032832928</id>
        <content type="html">整個推導過程，我曾在 DevOps Summit 2016 發表過一次，今晚於 DevOps Taiwan Meetup #2 再發表一次加長版。希望對於推廣 TOC 式的思考方式，以及解決一些 DevOps 難題，有一些幫助。&lt;br/>溫馨小提醒：我推導出來的結論，與你推導的結論，可能不盡相同；這是正常的。尤其這次為了聚焦在 DevOps 論述，CRT 還遺留一些沒有再繼續往下深究的因果關係（如：各自為政、無誘因、失敗代價高、曾失敗過、惰性），真要再往下深究，有很大比例會碰觸到《目標》、《絕不是靠運氣》、《關鍵鏈》一再點出的核心問題：局部成本觀，甚至還會碰觸到《抉擇》談到的「清晰思考四大障礙」。那又是另一個大哉問了⋯⋯&lt;br/>請把重點放在過程，體驗一下，用這一套「可以幫忙建構及溝通常識的思維方法」，藉以「激發、專注及審視你的直覺」是何滋味。</content>
    </entry>


    <entry>
        <title>練字與程式設計 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/154829/on-handwriting"/>
        <updated>2016-08-10T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-22:/blog/154829/20160822032528425</id>
        <content type="html">最近常常趁思考的空檔，拿出紙張，甚至用自製的「斜十字格」A4 紙張，信手寫些字句。&lt;br/>這讓我聯想到程式設計……</content>
    </entry>


    <entry>
        <title>演算法也有不神祕的一面（下集） | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/154515/on-algorithm-myth"/>
        <updated>2016-08-09T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-22:/blog/154515/20160822031901602</id>
        <content type="html">記得高中時，建中電研社社刊有一則笑話：&lt;br/>如果高斯 (Gauss) 小學時就學程式設計，他可能就懶得發明等差級數公式了，他會直接坐在電腦前，輸入……</content>
    </entry>


    <entry>
        <title>運算思惟其實一點也不神祕（上集）| 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/154064/on-computational-thinking"/>
        <updated>2016-08-08T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-08:/blog/154064/20160808073021715</id>
        <content type="html">運算思惟，聽起來既神祕，又抽象。滿容易震懾外行人的。&lt;br/>其實「運算思惟」沒有太神祕複雜，也不全然是計算機領域的專利。甚至在數學領域也都有，像經典級的 How to Solve It，或是像《德國一流大學教你數學家的 22 個思考工具》這本，都有許多論述。&lt;br/>只是傳統數學教學被炫麗解題花招綁架了，導致數學教育失靈。&lt;br/>只要第一線教育現場不重視根本思惟，那麼，再多一個程式設計課，就會提升下一代素質嗎……？</content>
    </entry>


    <entry>
        <title>請循其本 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/151626/back-to-the-origin"/>
        <updated>2016-08-02T01:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-08-08:/blog/151626/20160808072617330</id>
        <content type="html">老子曰：「五色令人目盲，五音令人耳聾。」&lt;br/>所以，最近我越來越喜歡從原始定義或目標下手。&lt;br/>原理通了，邏輯通了，再加一點點創意及想像力，很多東西都是順理成章就推導得出來。&lt;br/>溯源能力是很重要的，才不會被狀似革新，實則舊瓶裝新酒或跨領域借用的「新觀念」所迷惑。⋯⋯</content>
    </entry>


    <entry>
        <title>改變的框架 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/139468/change-framework"/>
        <updated>2016-06-28T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-06-28:/blog/139468/20160628035623557</id>
        <content type="html">對我來說，高德拉特代表一種極度陽剛的思維角度，薩提爾代表一種極度柔軟的治療角度。&lt;br/>這麼形容，並不代表他們是分處「剛」與「柔」兩個極端；相反的，越深入研究，越可體會出剛柔相濟的妙境。像高德拉特在《絕不是靠運氣》書中，演示了許多極度柔軟的「TOC 式說服程序」；而《薩提爾的家族治療模式》中闡釋的「高自我價值」，高度健旺的生命態度，令人動容。&lt;br/>這些特質，正與「大人思維」不謀而合。&lt;br/>所以，在某個層次上，「剛」與「柔」並不是兩個極端，而是可以協調產生綜效的。⋯⋯</content>
    </entry>


    <entry>
        <title>《鳳凰項目》私房標題 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/135333/phoenix-proj-titles"/>
        <updated>2016-06-21T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-06-21:/blog/135333/20160621065207102</id>
        <content type="html">我很好奇：DevOps 的「核心衝突」究竟是什麼？&lt;br/>我想效法《絕不是靠運氣》的主角 Rogo、《鳳凰項目》的主角 Bill，嘗試獨立思考。&lt;br/>我興致勃勃的照著高德拉特 Thinking Processes 的步驟，針對 DevOps 常見的問題／痛點／抱怨，老老實實地從 UDE → CRT → Clouds → injection → FRT 一路推導 DevOps 議題。&lt;br/>赫然發現：超誇張的，光是用 CRT，就能初步推導出 DevOps 的 CALMS 及所謂的 "The Three Ways"⋯⋯</content>
    </entry>


    <entry>
        <title>從「改變」角度看《魔戒》 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/125009/change-viewpoint-on-lord-of-rings"/>
        <updated>2016-05-24T23:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-05-24:/blog/125009/20160524072515563</id>
        <content type="html">今年一月，參加 David Ko 舉辦的一場「敏捷轉型」活動，從中學到了一個有趣的分析工具：Lean Change Canvas。&lt;br/>知道了一個好東西，自然要追本溯源，加深加廣，研讀相關資料；也要找機會多演練、多思考，才會內化。於是，歷經第二、三、四、五梯次 Ansible Workshop 的演練引導，更了解 Lean Change Canvas 適用的情境時機，自己也發展出配套措施：說故事、ORID 及 TOC，以順利聚焦。&lt;br/>在可預見的未來，我大概不太會在課堂上，慢慢引導 Lean Change Canvas 的分析流程。因此，我把剛結束的第五梯次 Ansible Workshop 課堂錄影，擷取其中第一段【從「改變」角度看《魔戒》】的引介內容，公開出來，給有興趣進行團隊引導的人參考。&lt;br/>（影片全長約 11 分鐘）⋯⋯</content>
    </entry>


    <entry>
        <title>有了 Agile，為什麼還要有 DevOps？ | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/115652/devops-a-lean-perspective"/>
        <updated>2016-05-03T23:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-05-04:/blog/115652/20160504072515563</id>
        <content type="html">今晚在 Agile Meetup Taipei 演講【有了 Agile，為什麼還要有 DevOps？】，投影片及現場實況錄影，全長 2 小時，歡迎享用。⋯⋯</content>
    </entry>


    <entry>
        <title>向遊戲學習 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/112281/learn-process-mgmt-by-game"/>
        <updated>2016-04-23T23:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-04-23:/blog/112281/20160423155431141</id>
        <content type="html">前一篇文章〈向工廠管理致敬〉提到，最近為了準備一場 Agile/DevOps 演講，我特地研讀了數本原典，希望能對某些核心的思考元素來一場溯源之旅。&lt;br/>啃原典，其實還有另一個原因：為了好好替今天要去大玩特玩的小火車遊戲⋯⋯喔，不，是為了替今天要專程去上的一門【102 流程設計與跨部門溝通】課程預作準備。&lt;br/>盯上這門課，其實已經很久了。只是這門課⋯⋯</content>
    </entry>


    <entry>
        <title>向工廠管理致敬 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/111886/learn-from-plant-mgmt"/>
        <updated>2016-04-22T22:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-04-22:/blog/111886/20160422140948642</id>
        <content type="html">身為徹頭徹尾的軟體人，在軟體產業待久了，總會對「硬」一點的產業，尤其是製造業，有莫名的成見，以為他們是僵固的、反人性的。從 1972 年「軟體危機」引發的論述當中，更加深軟體人的印象：製造業的經驗，是無法直接套用到軟體界的；我們是截然不同的國度。&lt;br/>不過，近十年來許多軟體界的流程改革，尤其是同屬 Agile 陣營的 Scrum 及 Kanban，居然有許多元素是從製造業偷竊學習而來：由 Toyota 引領風潮的 Lean Production 及 JIT，是相關文獻最常引述的；但其實還有從 TOC 學來的流程分析及改善手法。&lt;br/>因此，最近為了準備一場 Agile/DevOps 演講，我特地研讀了數本原典，希望能對某些核心的思考元素來一場溯源之旅⋯⋯</content>
    </entry>


    <entry>
        <title>Docker 端出 Unikernel 路線的第一道菜 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/105172/docker-unikernel"/>
        <updated>2016-04-06T13:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-04-07:/blog/105172/20160407025731284</id>
        <content type="html">現在 Docker engine for Mac/Windows 雖然只是小小展示一下 hypervisor 的火力（嚴格來說，甚至連 unikernel 的威力都還沒用上），但在可預期的未來，將對其他所謂的 Container OS 陣營帶來不小的威脅。&lt;br/>擁有自主的 hypervisor/unikernel 技術能力，究竟有多麼重要？&lt;br/>就以一個 Mac/Windows 用戶常見的 FAQ 來說吧⋯⋯</content>
    </entry>


    <entry>
        <title>多工切換：有趣的 Lean 觀點 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/101712/lean-perspective-of-multitasking"/>
        <updated>2016-03-30T01:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-29:/blog/101712/20160329170807820</id>
        <content type="html">以電腦運作原理來看，多工、工作切換，代價是 context switch 的 overhead。所以，近代敏捷開發方法論，總是希望在制度設計上盡量降低工作切換。&lt;br/>原本我也把它當成不證自明的常識。不過，偶然看到 Lean Thinking 提到的一項實驗，大大顛覆我的成見。⋯⋯</content>
    </entry>


    <entry>
        <title>貨櫃革命 | Docker Workshop 首部曲：基礎篇</title>
        <link href="http://school.soft-arch.net/courses/docker-part1/lectures/899918"/>
        <updated>2016-03-24T06:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-29:/courses/docker-part1/lectures/20160329171251921</id>
        <content type="html">[Docker Workshop 首部曲：基礎篇] 新單元&lt;br/>貨櫃革命 (全長約 16 分鐘)。&lt;br/>&lt;br/>

        Container，台灣翻譯成「貨櫃」，對岸翻譯成「集裝箱」。&lt;br/>許多 Docker 的 logo 都會向「貨櫃」、「貨輪」這類的概念形象致意。你知道為什麼嗎？&lt;br/>我從 YouTube 搜集了四段影片，剪接重點，並在關鍵片段配上自己翻譯的字幕，幫助你從「實體」的貨櫃演進史，理解整個貨櫃運輸的背景脈絡。&lt;br/>拿「實體」的金屬貨櫃，與電腦界的「虛擬」貨櫃，兩相對照，可以得到許多啟發。 </content>
    </entry>


    <entry>
        <title>POLP：最小權限原則 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/95524/polp-intro"/>
        <updated>2016-03-15T06:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-15:/blog/95524/20160315064546867</id>
        <content type="html">對於帳號權限不知道該如何設定的人，通常最好的方式是：觀摩別人是怎麼做的，尤其是經典級的 services。&lt;br/>從 Apache、Nginx、MySQL 三個經典案例，可以歸納出一個小結論：「他們都盡可能不以 root 身分執行。」或者用更有學問的說法：他們都遵循最小權限原則 (principle of least privilege; POLP)。⋯⋯</content>
    </entry>


    <entry>
        <title>Synced folder 有時無效，怎麼辦？ | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/825482"/>
        <updated>2016-03-10T01:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-09:/courses/vm-for-devops/lectures/20160309223620691</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>Synced folder 有時無效，怎麼辦？ (全長約 19 分鐘)。&lt;br/>&lt;br/>

        想在 Vagrant 裡使用 synced folder 功能，有個前提：guest machine 裡面，要預載一份虛擬機軟體提供的小工具，才能打通 host machine 與 guest machine 之間的目錄共享機制。&lt;br/>正常情況下，我們選用的 Vagrant box 都會先預載上述的小工具（沒有的話，就是你選錯了！請到 Atlas 網站 重新挑選吧）。不過，事情總有例外⋯⋯ </content>
    </entry>


    <entry>
        <title>我想要 GUI 模式的虛擬機 | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/780721"/>
        <updated>2016-03-08T23:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-08:/courses/vm-for-devops/lectures/20160308164856085</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>我想要 GUI 模式的虛擬機 (全長約 11 分鐘)。&lt;br/>&lt;br/>

        雖然以 server 實務而言，特別是雲端的 server，大半都是以純文字模式在運作。不過，懷舊的人，想要看到舊式的 login console 視窗；或是遇到特別需要召喚出 GUI 視窗系統的情況，該怎麼辦？  </content>
    </entry>


    <entry>
        <title>能不能分配多核心給虛擬機用？ | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/780723"/>
        <updated>2016-03-07T23:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-07:/courses/vm-for-devops/lectures/20160307162153154</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>能不能分配多核心給虛擬機用？ (全長約 7 分鐘)。&lt;br/>&lt;br/>

        各個 Vagrant box 製作者，都會替它設好「在大多數情況下」夠用的初始值。不過，某些時候，這些初始值可能會不夠用。&lt;br/>譬如說，近代軟體系統，通常都會善用多核心 CPU 的威力。如果想在虛擬機裡面模擬出多核心 CPU，而不要只有可憐的 1 顆 CPU，該怎麼辦？  </content>
    </entry>


    <entry>
        <title>DevOps 核心元素的考古溯源 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/92616/origin-of-devops-elements"/>
        <updated>2016-03-07T13:30:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-07:/blog/92616/20160307073308766</id>
        <content type="html">[讀書筆記]&lt;br/>對 The Phoenix Project 這本書的附錄 "Where DevOps Came From"，進行簡單的導讀⋯⋯</content>
    </entry>


    <entry>
        <title>記憶體不夠，怎麼辦？ | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/780719"/>
        <updated>2016-03-07T01:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-06:/courses/vm-for-devops/lectures/20160306172109084</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>記憶體不夠，怎麼辦？ (全長約 9 分鐘)。&lt;br/>&lt;br/>

        各個 Vagrant box 製作者，都會替它設好「在大多數情況下」夠用的初始值。不過，某些時候，這些初始值可能會不夠用。&lt;br/>譬如說，如果想在虛擬機裡面跑比較大的軟體，記憶體常常會不夠用。這時候，該怎麼辦？ </content>
    </entry>


    <entry>
        <title>檔案系統：搞定存取權限 | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/781686"/>
        <updated>2016-03-04T01:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/vm-for-devops/lectures/20160303222701671</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>既然要模擬，就模擬得像一點！／ 檔案系統 (全長約 22 分鐘)。&lt;br/>&lt;br/>

        前面的單元介紹過，透過 Vagrant 的 synced folder 機制，可以將 host machine 的某些目錄，掛載到 guest machine 裡面的某些指定目錄。兩邊的檔案系統會相互連動。&lt;br/>一般情況下，Vagrant 的這種設計，已經很夠用了。&lt;br/>不過，凡事總有例外。&lt;br/>我們以一個簡單的 PHP 5 案例，一步步解釋問題出在哪裡，又該如何解決。</content>
    </entry>


    <entry>
        <title>電腦界的隱喻：組態管理 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/90699/metaphor-in-cm"/>
        <updated>2016-03-02T20:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/blog/90699/20160303035115181</id>
        <content type="html">[趣聞]&lt;br/>組態管理的四大工具，也是愛用隱喻的⋯⋯</content>
    </entry>


    <entry>
        <title>帳號系統：還給你更真實的帳號 | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/800635"/>
        <updated>2016-03-02T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/vm-for-devops/lectures/20160303041053332</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>既然要模擬，就模擬得像一點！／ 帳號系統 (全長約 18 分鐘)。&lt;br/>&lt;br/>

        在 Vagrant 的虛擬機開機畫面中，或從 vagrant ssh-config 命令中，我們可以看到，Vagrant 自動幫我們設了一個 "vagrant" 登入帳號，並且以 "vagrant" 為密碼，或以 ".vagrant/machines/default/virtualbox/private_key" 為 private key 進行登入。&lt;br/>一般情況下，以這種方式使用 Vagrant 就很夠了。&lt;br/>不過，有時你可能會希望連「帳號」（以及 private key）這件事，都模擬得更像真實環境。畢竟在真實環境中，真的會有人取一個名叫 "vagrant" 的帳號嗎？&lt;br/>既然要模擬，就模擬得像一點⋯⋯</content>
    </entry>


    <entry>
        <title>網路系統：突破虛擬機的網路隔離措施 | 研發者的虛擬機寶盒</title>
        <link href="http://school.soft-arch.net/courses/vm-for-devops/lectures/781687"/>
        <updated>2016-02-26T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/vm-for-devops/lectures/20160303042146623</id>
        <content type="html">[研發者的虛擬機寶盒] 新單元&lt;br/>既然要模擬，就模擬得像一點！／ 網路系統 (全長近 22 分鐘)。&lt;br/>&lt;br/>

        虛擬機，本質上是一個模擬環境，而且是安全隔離的模擬環境。如果不做任何措施，它會將 guest machine 內部的網路運作，與外面 host machine 相互隔絕。&lt;br/>有這種隔離措施，我們才能很放心的進行各種大膽的實驗，不怕搞壞 host machine。&lt;br/>不過，有些時候，這種隔離措施也會反過來阻礙模擬的真實性⋯⋯</content>
    </entry>


    <entry>
        <title>連 Python 都沒有，怎麼辦？ | Ansible Workshop</title>
        <link href="http://school.soft-arch.net/courses/ansible/lectures/798994"/>
        <updated>2016-02-23T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/ansible/lectures/20160303074153446</id>
        <content type="html">[Ansible 常見問題]&lt;br/>
        連 Python 都沒有，怎麼辦？ (影片全長 14 分鐘)&lt;br/>&lt;br/>

        某些暫時無法汰換的老舊主機，或是講究輕量化、極簡化的 Linux distribution，尤其是嵌入式系統，為了節省空間，常常沒有預載 Python。&lt;br/>如果想將這些系統也納入 Ansible 的管理範圍，我們就要先安裝或升級新一點的 Python 版本進去。&lt;br/>這一課，我們以嵌入式系統、minimal Docker container 領域常見的一套 Alpine Linux 為例，示範如何裝一份 Python 進去，讓它可以進而被 Ansible 所管理。</content>
    </entry>


    <entry>
        <title>用 Ansible 設定雲端主機組態 | Ansible Workshop</title>
        <link href="http://school.soft-arch.net/courses/ansible/lectures/737132"/>
        <updated>2016-02-14T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/ansible/lectures/20160303074844019</id>
        <content type="html">[Ansible 第二式]&lt;br/>用 Ansible 設定雲端主機組態 (影片全長 14 分鐘)&lt;br/>&lt;br/>

        上一課，我們先以本機端的虛擬機為例，示範如何用 Ansible 來設定它的組態。了解 Ansible 的 control machine 及 managed node 的運作邏輯之後，這一課，我們會將經驗套用到雲端主機身上。&lt;br/>我們會探討兩種雲端主機的情境：&lt;br/>① Ansible control machine 可以直接觸碰到 managed node 時。&lt;br/>② Ansible control machine 無法直接觸碰到 managed node 時。</content>
    </entry>


    <entry>
        <title>用 Ansible 設定虛擬機組態 | Ansible Workshop</title>
        <link href="http://school.soft-arch.net/courses/ansible/lectures/737129"/>
        <updated>2016-02-05T07:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/courses/ansible/lectures/20160303074903709</id>
        <content type="html">[Ansible 起手式]&lt;br/>用 Ansible 設定虛擬機組態 (影片全長 15 分鐘)。&lt;br/>&lt;br/>

        任何主機（不管是實體機、本地虛擬機、雲端主機），只要有提供 SSH 登入的途徑，也有預載 Python 2.x 版，就能被視為 managed node，就能被 Ansible 系統管理。&lt;br/>這一課，我們先以本機端的虛擬機為例，示範如何用 Ansible 來設定它的組態。了解 Ansible 的 control machine 及 managed node 的運作邏輯之後，下一課再將經驗套用到雲端主機身上。&lt;br/>這段教學影片中，我以 Ansible 軟體來示範兩種組態管理的手法：&lt;br/>① 「Ansible → Vagrant」操作動線，&lt;br/>② 以 Vagrant 為中心的操作動線。</content>
    </entry>


    <entry>
        <title>一句話囊括 DevOps 的目標 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/79569/devops-goals-in-a-nutshell"/>
        <updated>2016-01-29T16:25:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/blog/79569/20160303035751473</id>
        <content type="html">[讀書筆記]&lt;br/>對 SEI 出版的書 "DevOps: A Software Architect's Perspective" 當中的第一章，做的簡要整理⋯⋯</content>
    </entry>


    <entry>
        <title>DevOps 是圓的，找到立足點就是頂點 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/71706/devops-1st-step"/>
        <updated>2015-12-28T20:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/blog/71706/20160303040248146</id>
        <content type="html">Bryan 在【尋找天賦與熱情的系統化做法】大人學講座中曾提到一個觀點：「世界是圓的，找到立足點就是頂點。」&lt;br/>我也想說：﻿「DevOps 是圓的，找到立足點就是頂點。」 ⋯⋯</content>
    </entry>


    <entry>
        <title>CI 怎樣帶你遠離平庸？ | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/70841/ci-effect"/>
        <updated>2015-12-22T20:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/blog/70841/20160303040602805</id>
        <content type="html">鄉愿一點來講，人生的每一抉擇，都可能是不歸路；後見之明來看，人生的每一轉折，也都可能是不歸路。如果不要陳義過高，回到具體一點的軟體研發情境，CI，的確夠資格當成是不歸路。 ⋯⋯</content>
    </entry>


    <entry>
        <title>CI 是條不歸路 | 軟體架構・絮語</title>
        <link href="http://school.soft-arch.net/blog/70585/ci-no-turning-back"/>
        <updated>2015-12-21T20:00:00+08:00</updated>
        <id>tag:school.soft-arch.net,2016-03-03:/blog/70585/20160303040655554</id>
        <content type="html">CI/CD/DevOps 既是條不歸路，更是大躍進之路：一旦踏出第一步，就注定你會不斷接觸遠離平庸的新觀點、新技術⋯⋯</content>
    </entry>

</feed>
